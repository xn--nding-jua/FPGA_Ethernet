	component PHY_AES50B is
		port (
			clk               : in  std_logic                     := 'X';             -- clk
			reset             : in  std_logic                     := 'X';             -- reset
			readdata          : out std_logic_vector(31 downto 0);                    -- readdata
			read              : in  std_logic                     := 'X';             -- read
			writedata         : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			write             : in  std_logic                     := 'X';             -- write
			waitrequest       : out std_logic;                                        -- waitrequest
			address           : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- address
			rx_afull_clk      : in  std_logic                     := 'X';             -- clk
			rx_afull_data     : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- data
			rx_afull_valid    : in  std_logic                     := 'X';             -- valid
			rx_afull_channel  : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- channel
			mac_rx_clk_0      : out std_logic;                                        -- clk
			mac_tx_clk_0      : out std_logic;                                        -- clk
			data_rx_data_0    : out std_logic_vector(7 downto 0);                     -- data
			data_rx_eop_0     : out std_logic;                                        -- endofpacket
			data_rx_error_0   : out std_logic_vector(4 downto 0);                     -- error
			data_rx_ready_0   : in  std_logic                     := 'X';             -- ready
			data_rx_sop_0     : out std_logic;                                        -- startofpacket
			data_rx_valid_0   : out std_logic;                                        -- valid
			data_tx_data_0    : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- data
			data_tx_eop_0     : in  std_logic                     := 'X';             -- endofpacket
			data_tx_error_0   : in  std_logic                     := 'X';             -- error
			data_tx_ready_0   : out std_logic;                                        -- ready
			data_tx_sop_0     : in  std_logic                     := 'X';             -- startofpacket
			data_tx_valid_0   : in  std_logic                     := 'X';             -- valid
			pkt_class_data_0  : out std_logic_vector(4 downto 0);                     -- data
			pkt_class_valid_0 : out std_logic;                                        -- valid
			tx_crc_fwd_0      : in  std_logic                     := 'X';             -- export
			tx_clk_0          : in  std_logic                     := 'X';             -- clk
			rx_clk_0          : in  std_logic                     := 'X';             -- clk
			set_10_0          : in  std_logic                     := 'X';             -- set_10
			set_1000_0        : in  std_logic                     := 'X';             -- set_1000
			eth_mode_0        : out std_logic;                                        -- eth_mode
			ena_10_0          : out std_logic;                                        -- ena_10
			gm_rx_d_0         : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- gmii_rx_d
			gm_rx_dv_0        : in  std_logic                     := 'X';             -- gmii_rx_dv
			gm_rx_err_0       : in  std_logic                     := 'X';             -- gmii_rx_err
			gm_tx_d_0         : out std_logic_vector(7 downto 0);                     -- gmii_tx_d
			gm_tx_en_0        : out std_logic;                                        -- gmii_tx_en
			gm_tx_err_0       : out std_logic;                                        -- gmii_tx_err
			m_rx_d_0          : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- mii_rx_d
			m_rx_en_0         : in  std_logic                     := 'X';             -- mii_rx_dv
			m_rx_err_0        : in  std_logic                     := 'X';             -- mii_rx_err
			m_tx_d_0          : out std_logic_vector(3 downto 0);                     -- mii_tx_d
			m_tx_en_0         : out std_logic;                                        -- mii_tx_en
			m_tx_err_0        : out std_logic;                                        -- mii_tx_err
			mdc               : out std_logic;                                        -- mdc
			mdio_in           : in  std_logic                     := 'X';             -- mdio_in
			mdio_out          : out std_logic;                                        -- mdio_out
			mdio_oen          : out std_logic                                         -- mdio_oen
		);
	end component PHY_AES50B;

